using FluentValidation.Results;
using Maxsys.Core.Helpers;
using Maxsys.MediaManager.MusicContext.Domain.DTO;
using System;
using System.Collections.Generic;
using System.Linq;
using TagLib.Id3v2;
using TaglibCore;

namespace Maxsys.MediaManager.MusicContext.AppTagLib.Services
{
    public class Testes
    {
        private const string TEST_FILE = @"D:\ARQUIVOS\Music\TESTES\ArtTestes\Others\(2020) Album Teste\01 asd (1).mp3";

        public static string TagTypes(string filePath)
        {
            var result = "";
            using (var file = TagLib.File.Create(filePath))
            {
                result = file.TagTypesOnDisk.ToString();
            }

            return result;
        }

        public static IEnumerable<string> ListarFrames(string filePath = TEST_FILE)
        {
            IEnumerable<string> frames = null;
            using (var file = TagLib.File.Create(filePath))
            {
                var tags = file.GetTag(TagLib.TagTypes.Id3v2, false) as Tag;
                //frames = LerFrames(tags);
                frames = tags.GetFrames()
                    .Select(f => FrameToString(f))
                    .OrderBy(x => x);
            }

            return frames;
        }

        private static string FrameToString(Frame frame)
        {
            var content = frame switch
            {
                PrivateFrame => $"Owner<{(frame as PrivateFrame).Owner}>",
                UserTextInformationFrame => $"<{string.Join(" | ", (frame as UserTextInformationFrame).Text)}>",
                TextInformationFrame => $"<{string.Join(" | ", (frame as TextInformationFrame).Text)}>",
                PopularimeterFrame => $"USR<{(frame as PopularimeterFrame).User}> RATING<{(frame as PopularimeterFrame).Rating}>",
                CommentsFrame => $"LNG:<{(frame as CommentsFrame).Language}> DES<{(frame as CommentsFrame).Description}> TXT<{(frame as CommentsFrame).Text}>",
                UnsynchronisedLyricsFrame => $"LNG:<{(frame as UnsynchronisedLyricsFrame).Language}> DES<{(frame as UnsynchronisedLyricsFrame).Description}> TXT<{(frame as UnsynchronisedLyricsFrame).Text}>",
                UnknownFrame => nameof(UnknownFrame),

                _ => "Unexpected frame type!!!!!!!"
            };

            return $"ID[{frame.FrameId}] | {content} | FRAME_TYPE: <{frame.GetType()}>";
        }

        public ValidationResult WriteTags(Id3v2DTO dto)
        {
            var validationResult = new ValidationResult();
            var fileFullPath = dto.FullPath;

            IOHelper.RemoveReadOnlyAttribute(fileFullPath);

            try
            {
                using (var mp3 = TagLib.File.Create(fileFullPath))
                {
                    // clear old tags
                    mp3.RemoveTags(TagLib.TagTypes.AllTags);

                    // Getting the tags (Mpeg\File)
                    var tags = Id3v2Facade.Create(mp3, true);

                    // Not nullable values
                    //mp3Tags.TrackId = id3Tags.TrackId;
                    tags.Title = dto.Title;
                    tags.Artist = dto.Artist;
                    tags.Album = dto.Album;
                    tags.Genre = dto.Genre;
                    tags.Stars10 = dto.Rating10;

                    // Nullable values
                    tags.TrackNumber = dto.TrackNumber;
                    tags.Year = dto.Year;
                    tags.Composers = dto.Composers;
                    tags.Comments = dto.Comments;
                    tags.Lyrics = dto.Lyrics;
                    tags.OriginalArtist = dto.CoveredArtist;
                    tags.InvolvedPeople = dto.FeaturedArtist;
                    tags.CoverPicture = dto.CoverPicture;

                    mp3.Save();
                }
            }
            catch (Exception ex)
            {
                validationResult.AddFailure(fileFullPath, $"Error at tagging Mp3 File: {ex.Message}");
            }

            IOHelper.InsertReadOnlyAttribute(fileFullPath);

            return validationResult;
        }

        public Id3v2DTO ReadTags(string filePath)
        {
            using (var mp3 = TagLib.File.Create(filePath))
            {
                var tags = Id3v2Facade.Create(mp3, false);

                return tags is null
                    ? Id3v2DTO.Empty
                    : new Id3v2DTO(fullPath: filePath
                        , title: tags.Title
                        , trackNumber: tags.TrackNumber
                        , stars10: tags.Stars10
                        , album: tags.Album
                        , genre: tags.Genre
                        , artist: tags.Artist
                        , year: tags.Year
                        , comments: tags.Comments
                        , lyrics: tags.Lyrics
                        , coveredArtist: tags.OriginalArtist
                        , featuredArtist: tags.InvolvedPeople
                        , composers: tags.Composers
                        , coverPicture: tags.CoverPicture);
            }
        }
    }
}