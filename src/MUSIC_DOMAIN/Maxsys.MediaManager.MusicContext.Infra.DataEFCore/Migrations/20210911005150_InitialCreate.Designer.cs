// <auto-generated />
using System;
using Maxsys.MediaManager.MusicContext.Infra.DataEFCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Maxsys.MediaManager.MusicContext.Infra.DataEFCore.Migrations
{
    [DbContext(typeof(MusicAppContext))]
    [Migration("20210911005150_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComposerMusic", b =>
                {
                    b.Property<Guid>("ComposersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ComposersId", "MusicsId");

                    b.HasIndex("MusicsId");

                    b.ToTable("ComposerMusic");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("AlbumCover")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("AlbumDirectory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte>("AlbumType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId", "Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Albums_ArtistAlbumName");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicCatalogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MusicCatalogId");

                    b.HasIndex("Name", "MusicCatalogId")
                        .IsUnique()
                        .HasDatabaseName("AK_Artists_Name_Catalog");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Composer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Composers_Name");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Music", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MediaFile_CreatedDate");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("MediaFile_FileSize");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)")
                        .HasColumnName("MediaFile_FullPath");

                    b.Property<string>("Lyrics")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MediaFile_OriginalFileName");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TrackNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("MediaFile_UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("FullPath")
                        .IsUnique()
                        .HasDatabaseName("AK_Musics_FullPath");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.MusicCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_MusicCatalogs_Name");

                    b.ToTable("MusicCatalogs");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Playlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Playlists_Name");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.PlaylistItem", b =>
                {
                    b.Property<Guid>("PlaylistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MusicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("PlaylistId", "MusicId");

                    b.HasIndex("MusicId");

                    b.ToTable("PlaylistItems");
                });

            modelBuilder.Entity("ComposerMusic", b =>
                {
                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Composer", null)
                        .WithMany()
                        .HasForeignKey("ComposersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Music", null)
                        .WithMany()
                        .HasForeignKey("MusicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Album", b =>
                {
                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Artist", b =>
                {
                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.MusicCatalog", "MusicCatalog")
                        .WithMany("Artists")
                        .HasForeignKey("MusicCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicCatalog");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Music", b =>
                {
                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Album", "Album")
                        .WithMany("Musics")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Maxsys.MediaManager.MusicContext.Domain.ValueObjects.Classification", "Classification", b1 =>
                        {
                            b1.Property<Guid>("MusicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Rating")
                                .HasColumnType("int");

                            b1.HasKey("MusicId");

                            b1.ToTable("Musics");

                            b1.WithOwner()
                                .HasForeignKey("MusicId");
                        });

                    b.OwnsOne("Maxsys.MediaManager.MusicContext.Domain.ValueObjects.MusicDetails", "MusicDetails", b1 =>
                        {
                            b1.Property<Guid>("MusicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("CoveredArtist")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("FeaturedArtist")
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<bool>("IsBonusTrack")
                                .HasColumnType("bit");

                            b1.Property<byte>("VocalGender")
                                .HasColumnType("tinyint");

                            b1.HasKey("MusicId");

                            b1.ToTable("Musics");

                            b1.WithOwner()
                                .HasForeignKey("MusicId");
                        });

                    b.OwnsOne("Maxsys.MediaManager.MusicContext.Domain.ValueObjects.MusicProperties", "MusicProperties", b1 =>
                        {
                            b1.Property<Guid>("MusicId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("BitRate")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("Duration")
                                .HasColumnType("time");

                            b1.HasKey("MusicId");

                            b1.ToTable("Musics");

                            b1.WithOwner()
                                .HasForeignKey("MusicId");
                        });

                    b.Navigation("Album");

                    b.Navigation("Classification");

                    b.Navigation("MusicDetails");

                    b.Navigation("MusicProperties");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.PlaylistItem", b =>
                {
                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Music", "Music")
                        .WithMany()
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Maxsys.MediaManager.MusicContext.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Music");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Album", b =>
                {
                    b.Navigation("Musics");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.MusicCatalog", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("Maxsys.MediaManager.MusicContext.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
